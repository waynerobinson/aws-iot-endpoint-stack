AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
                - iot:DescribeEndpoint
              Resource:
                - '*'

  IotEndpointProvider:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: IotEndpointProvider
      Handler: index.handler
      Runtime: nodejs6.10
      MemorySize: 128
      Timeout: 5
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          var aws = require("aws-sdk");

          exports.handler = function(event, context) {
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));

              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  sendResponse(event, context, "SUCCESS");
                  return;
              }

              const iot = new aws.Iot();
              iot.describeEndpoint({}, (err, data) => {
              let responseData, responseStatus;
                  if (err) {
                      responseStatus = "FAILED";
                      responseData = { Error: "describeEndpoint call failed" };
                      console.log(responseData.Error + ":\n", err);
                  } else  {
                      responseStatus = "SUCCESS";
                      responseData = { IotEndpointAddress: data.endpointAddress };
                      console.log('response data: ' + JSON.stringify(responseData));
                  }

                  sendResponse(event, context, responseStatus, responseData);
              });
          };

          // Send response to the pre-signed S3 URL
          function sendResponse(event, context, responseStatus, responseData) {

              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              });

              console.log("RESPONSE BODY:\n", responseBody);

              var https = require("https");
              var url = require("url");

              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };

              console.log("SENDING RESPONSE...\n");

              var request = https.request(options, function(response) {
                  console.log("STATUS: " + response.statusCode);
                  console.log("HEADERS: " + JSON.stringify(response.headers));
                  // Tell AWS Lambda that the function execution is done
                  context.done();
              });

              request.on("error", function(error) {
                  console.log("sendResponse Error:" + error);
                  // Tell AWS Lambda that the function execution is done
                  context.done();
              });

              // write data to request body
              request.write(responseBody);
              request.end();
          }

  IotEndpoint:
    Type: 'Custom::IotEndpoint'
    DependsOn: IotEndpointProvider
    Properties:
      ServiceToken: !GetAtt IotEndpointProvider.Arn

Outputs:
  IotEndpointAddress:
    Value: !GetAtt IotEndpoint.IotEndpointAddress
    Export:
      Name: IotEndpointAddress
